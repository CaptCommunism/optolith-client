// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var IC$OptolithClient = require("../Utilities/IC.bs.js");
var JsonStrict$OptolithClient = require("../Utilities/YAML/JsonStrict.bs.js");
var Static_Erratum$OptolithClient = require("./Static_Erratum.bs.js");
var Static_SourceRef$OptolithClient = require("./Static_SourceRef.bs.js");
var Static_Prerequisites$OptolithClient = require("./Static_Prerequisites.bs.js");

function applicationL10n(json) {
  return /* tuple */[
          Json_decode.field("id", Json_decode.$$int, json),
          Json_decode.field("name", Json_decode.string, json)
        ];
}

function useL10n(json) {
  return /* tuple */[
          Json_decode.field("id", Json_decode.$$int, json),
          Json_decode.field("name", Json_decode.string, json)
        ];
}

function tL10n(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          name: Json_decode.field("name", Json_decode.string, json),
          applications: Json_decode.field("applications", (function (param) {
                  return Json_decode.list(applicationL10n, param);
                }), json),
          applicationsInput: Json_decode.field("applicationsInput", (function (param) {
                  return JsonStrict$OptolithClient.maybe(Json_decode.string, param);
                }), json),
          uses: Json_decode.field("uses", (function (param) {
                  return Json_decode.list(useL10n, param);
                }), json),
          encDescription: Json_decode.field("encDescription", (function (param) {
                  return JsonStrict$OptolithClient.maybe(Json_decode.string, param);
                }), json),
          tools: Json_decode.field("tools", (function (param) {
                  return JsonStrict$OptolithClient.maybe(Json_decode.string, param);
                }), json),
          quality: Json_decode.field("quality", Json_decode.string, json),
          failed: Json_decode.field("failed", Json_decode.string, json),
          critical: Json_decode.field("critical", Json_decode.string, json),
          botch: Json_decode.field("botch", Json_decode.string, json),
          src: Json_decode.field("src", Static_SourceRef$OptolithClient.Decode.list, json),
          errata: Json_decode.field("errata", Static_Erratum$OptolithClient.Decode.list, json)
        };
}

function applicationUniv(json) {
  return /* tuple */[
          Json_decode.field("id", Json_decode.$$int, json),
          Json_decode.field("prerequisite", Static_Prerequisites$OptolithClient.Decode.activatable, json)
        ];
}

function useUniv(json) {
  return /* tuple */[
          Json_decode.field("id", Json_decode.$$int, json),
          Json_decode.field("prerequisite", Static_Prerequisites$OptolithClient.Decode.activatable, json)
        ];
}

function encumbranceUniv(json) {
  var str = Json_decode.string(json);
  switch (str) {
    case "false" :
        Json_decode.$$int(json);
        return /* False */1;
    case "maybe" :
        Json_decode.$$int(json);
        return /* Maybe */2;
    case "true" :
        Json_decode.$$int(json);
        return /* True */0;
    default:
      throw [
            Json_decode.DecodeError,
            "Unknown encumbrance: " + str
          ];
  }
}

function tUniv(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          applications: Json_decode.field("applications", (function (param) {
                  return Json_decode.list(applicationUniv, param);
                }), json),
          uses: Json_decode.field("uses", (function (param) {
                  return Json_decode.list(useUniv, param);
                }), json),
          check1: Json_decode.field("check1", Json_decode.$$int, json),
          check2: Json_decode.field("check2", Json_decode.$$int, json),
          check3: Json_decode.field("check3", Json_decode.$$int, json),
          ic: Json_decode.field("ic", IC$OptolithClient.Decode.ic, json),
          enc: Json_decode.field("enc", encumbranceUniv, json),
          gr: Json_decode.field("gr", Json_decode.$$int, json)
        };
}

var Decode = {
  applicationL10n: applicationL10n,
  useL10n: useL10n,
  tL10n: tL10n,
  applicationUniv: applicationUniv,
  useUniv: useUniv,
  encumbranceUniv: encumbranceUniv,
  tUniv: tUniv
};

exports.Decode = Decode;
/* No side effect */
