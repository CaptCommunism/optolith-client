// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var IntMap$OptolithClient = require("../../../Data/IntMap.bs.js");
var RawEntries$OptolithClient = require("./RawEntries.bs.js");

function toMapIntegrity(xs) {
  return List.fold_right((function (param, mp) {
                var k = param[0];
                if (Curry._2(IntMap$OptolithClient.member, k, mp)) {
                  throw [
                        Json_decode.DecodeError,
                        "toMapIntegrity: Key " + (k.toString() + "is set twice")
                      ];
                }
                return Curry._3(IntMap$OptolithClient.insert, k, param[1], mp);
              }), xs, IntMap$OptolithClient.empty);
}

var Entity = {
  toMapIntegrity: toMapIntegrity
};

var Integrity = {
  Entity: Entity
};

function zipBy(getKeyFromOptional, getKeyFromRequired, merge, optionals, requireds) {
  if (requireds) {
    var r = requireds[0];
    var match = List.find_opt((function (o) {
            var k = Curry._1(getKeyFromOptional, o);
            return k === Curry._1(getKeyFromRequired, r);
          }), optionals);
    if (match !== undefined) {
      return /* :: */[
              Curry._2(merge, r, Caml_option.valFromOption(match)),
              zipBy(getKeyFromOptional, getKeyFromRequired, merge, optionals, requireds[1])
            ];
    } else {
      throw [
            Json_decode.DecodeError,
            "zipBy: No matching entry found at key " + Curry._1(getKeyFromRequired, r).toString()
          ];
    }
  } else {
    return /* [] */0;
  }
}

var Zip = {
  zipBy: zipBy
};

function fromJson(yaml) {
  return toMapIntegrity(RawEntries$OptolithClient.AspectsL10n.fromYaml(yaml));
}

var Aspects = {
  fromJson: fromJson
};

function merge(l10n, univ) {
  return /* tuple */[
          univ.id,
          {
            id: univ.id,
            name: l10n.name,
            ap: univ.ap,
            maxAttributeValue: univ.maxAttributeValue,
            maxSkillRating: univ.maxSkillRating,
            maxCombatTechniqueRating: univ.maxCombatTechniqueRating,
            maxTotalAttributeValues: univ.maxTotalAttributeValues,
            maxSpellsLiturgicalChants: univ.maxSpellsLiturgicalChants,
            maxUnfamiliarSpells: univ.maxUnfamiliarSpells
          }
        ];
}

function fromJson$1(yaml) {
  return toMapIntegrity(zipBy((function (x) {
                    return x.id;
                  }), (function (x) {
                    return x.id;
                  }), merge, RawEntries$OptolithClient.ExperienceLevelsUniv.fromYaml(yaml), RawEntries$OptolithClient.ExperienceLevelsL10n.fromYaml(yaml)));
}

var ExperienceLevels = {
  fromJson: fromJson$1
};

exports.Integrity = Integrity;
exports.Zip = Zip;
exports.Aspects = Aspects;
exports.ExperienceLevels = ExperienceLevels;
/* IntMap-OptolithClient Not a pure module */
