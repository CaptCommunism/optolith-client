// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var IntMap$OptolithClient = require("../../../Data/IntMap.bs.js");

function toMapIntegrity(xs) {
  return List.fold_right((function (param, mp) {
                var k = param[0];
                if (Curry._2(IntMap$OptolithClient.member, k, mp)) {
                  throw [
                        Json_decode.DecodeError,
                        "toMapIntegrity: Key " + (k.toString() + "is set twice")
                      ];
                }
                return Curry._3(IntMap$OptolithClient.insert, k, param[1], mp);
              }), xs, IntMap$OptolithClient.empty);
}

var Entity = {
  toMapIntegrity: toMapIntegrity
};

var Integrity = {
  Entity: Entity
};

function zipBy(getKeyFromOptional, getKeyFromRequired, merge, optionals, requireds) {
  if (requireds) {
    var r = requireds[0];
    var match = List.find_opt((function (o) {
            var k = Curry._1(getKeyFromOptional, o);
            return k === Curry._1(getKeyFromRequired, r);
          }), optionals);
    if (match !== undefined) {
      return /* :: */[
              Curry._2(merge, r, Caml_option.valFromOption(match)),
              zipBy(getKeyFromOptional, getKeyFromRequired, merge, optionals, requireds[1])
            ];
    } else {
      throw [
            Json_decode.DecodeError,
            "zipBy: No matching entry found at key " + Curry._1(getKeyFromRequired, r).toString()
          ];
    }
  } else {
    return /* [] */0;
  }
}

var Zip = {
  zipBy: zipBy
};

exports.Integrity = Integrity;
exports.Zip = Zip;
/* IntMap-OptolithClient Not a pure module */
