type singleWithId = {
  id: int,
  options: list(Hero.Activatable.option),
  level: Maybe.t(int),
  customCost: Maybe.t(int),
};

let isActive = (x: Hero.Activatable.t) => ListH.Extra.notNull(x.active);

let isActiveM = Maybe.maybe(false, isActive);

module Convert = {
  open Maybe;

  let heroEntryToSingles = (x: Hero.Activatable.t) =>
    x.active
    |> ListH.map((s: Hero.Activatable.single) =>
         {
           id: x.id,
           options: s.options,
           level: s.level,
           customCost: s.customCost,
         }
       );
  /* /**
    * Converts the object generated by the list item to an object that can be
    * inserted into an array of ActiveObjects.
    * @param obj The entry for which you want to convert the object.
    * @param activate The object generated by the list item.
    */
   export const convertUIStateToActiveObject =
     (activate: Record<ActivatableActivationOptions>): Record<ActiveObject> => {
       const id = AAOA.id (activate)
       const selectOptionId1 = AAOA.selectOptionId1 (activate)
       const selectOptionId2 = AAOA.selectOptionId2 (activate)
       const selectOptionId3 = AAOA.selectOptionId3 (activate)
       const input = AAOA.input (activate)
       const level = AAOA.level (activate)
       const customCost = AAOA.customCost (activate)

       return id === AdvantageId.HatredOf
         ? ActiveObject ({
             sid: selectOptionId1,
             sid2: input,
             cost: customCost,
           })
         : id === DisadvantageId.PersonalityFlaw
         ? ActiveObject ({
             sid: selectOptionId1,
             sid2: or (fmap (elemF (List<number | string> (7, 8)))
                           (selectOptionId1))
               ? input
               : Nothing,
             cost: customCost,
           })
         : id === SpecialAbilityId.SkillSpecialization
         ? ActiveObject ({
             sid: selectOptionId1,
             sid2: alt<number | string> (input)
                                       (selectOptionId2),
             cost: customCost,
           })
         : isJust (input) && isJust (selectOptionId1)
         ? ActiveObject ({
             sid: selectOptionId1,
             sid2: input,
             sid3: selectOptionId2,
             tier: level,
             cost: customCost,
           })
         : ActiveObject ({
             sid: alt<number | string> (input)
                                       (selectOptionId1),
             sid2: then (guard (isJust (input) || isJust (selectOptionId1)))
                       (selectOptionId2),
             sid3: selectOptionId3,
             tier: level,
             cost: customCost,
           })
     } */
  /* /**
    * Generates a list of ActiveObjects based on the given instance.
    */
   export const convertActivatableToArray =
     (x: Record<ActivatableDependent>) =>
       pipe_ (
               x,
               ADA.active,
               imap (index => toActiveObjectWithId (index) (ADA.id (x)))
             ) */
  /* /**
    * Get all active items in an array.
    * @param state A state slice.
    */
   export const getActiveFromState =
     foldr (pipe (convertActivatableToArray, append)) (empty)

   export interface ActiveObjectAny extends ActiveObject {
     [key: string]: any
   } */

  let activatableOptionToSelectOptionId =
      (id: Hero.Activatable.option): maybe(Ids.selectOptionId) =>
    switch (id) {
    | `Generic(_) as id
    | `Skill(_) as id
    | `CombatTechnique(_) as id
    | `Spell(_) as id
    | `Cantrip(_) as id
    | `LiturgicalChant(_) as id
    | `Blessing(_) as id => Just(id)
    | `CustomInput(_) => Nothing
    };
};

module Accessors = {
  open Static;

  let name = x =>
    switch (x) {
    | Advantage(y) => y.name
    | Disadvantage(y) => y.name
    | SpecialAbility(y) => y.name
    };

  let selectOptions = x =>
    switch (x) {
    | Advantage(y) => y.selectOptions
    | Disadvantage(y) => y.selectOptions
    | SpecialAbility(y) => y.selectOptions
    };

  let input = x =>
    switch (x) {
    | Advantage(y) => y.input
    | Disadvantage(y) => y.input
    | SpecialAbility(y) => y.input
    };
};

module SelectOptions = {
  open Static.SelectOption;
  open Maybe;
  open Maybe.Functor;
  open Maybe.Monad;

  let getSelectOption = (x, id) =>
    id
    |> Convert.activatableOptionToSelectOptionId
    >>= Function.flip(SelectOptionMap.lookup, Accessors.selectOptions(x));

  /**
   * Get a selection option's name with the given id from given wiki entry.
   * Returns `Nothing` if not found.
   */
  let getSelectOptionName = (x, id) =>
    id |> getSelectOption(x) <&> (y => y.name);

  /**
   * Get a selection option's cost with the given id from given wiki entry.
   * Returns `Nothing` if not found.
   */
  let getSelectOptionCost = (x, id) =>
    id |> getSelectOption(x) >>= (y => y.cost);

  /**
   * Get all first select option IDs from the given entry.
   */
  let getActiveSelections = (x: Hero.Activatable.t) =>
    x.active
    |> mapMaybe((y: Hero.Activatable.single) => y.options |> listToMaybe);
  // type SecondarySelections = OrderedMap<number | string, List<string | number>>
  //
  // /**
  //  * Get all `ActiveObject.sid2` values from the given instance, sorted by
  //  * `ActiveObject.sid` in Map.
  //  * @param entry
  //  */
  // export const getActiveSecondarySelections =
  //   fmap (pipe (
  //               ADA.active,
  //               foldl ((map: SecondarySelections) => (selection: Record<ActiveObject>) =>
  //                       fromMaybe (map)
  //                                 (liftM2<string | number, string | number, SecondarySelections>
  //                                   (id => id2 => alter<List<string | number>>
  //                                     (pipe (
  //                                       fmap (consF (id2)),
  //                                       altF (Just (List (id2)))
  //                                     ))
  //                                     (id)
  //                                     (map))
  //                                   (AOA.sid (selection))
  //                                   (AOA.sid2 (selection))))
  //                     (OrderedMap.empty)
  //             ))
  //
  // /**
  //  * Get all `DependencyObject.sid` values from the given instance.
  //  * @param obj The entry.
  //  */
  // export const getRequiredSelections:
  //   (m: Maybe<Record<ActivatableDependent>>) => Maybe<List<string | number | List<number>>> =
  //     fmap (pipe (
  //       ADA.dependencies,
  //       mapMaybe<ActivatableDependency, string | number | List<number>> (pipe (
  //         ensure (isRecord),
  //         bindF (DependencyObject.A.sid)
  //       ))
  //     ))
};

module Names = {
  open Maybe;
  open Maybe.Functor;
  open Maybe.Monad;
  open Static;
  open Function;

  let getOption1 = heroEntry => heroEntry.options |> listToMaybe;
  let getOption2 = heroEntry => ListH.(heroEntry.options <!!> 1);
  let getOption3 = heroEntry => ListH.(heroEntry.options <!!> 2);

  let getCustomInput = (option: Hero.Activatable.option) =>
    switch (option) {
    | `CustomInput(x) => Just(x)
    | `Generic(_)
    | `Skill(_)
    | `CombatTechnique(_)
    | `Spell(_)
    | `LiturgicalChant(_)
    | `Cantrip(_)
    | `Blessing(_) => Nothing
    };

  let getGenericId = (option: Hero.Activatable.option) =>
    switch (option) {
    | `Generic(x) => Just(x)
    | `Skill(_)
    | `CombatTechnique(_)
    | `Spell(_)
    | `LiturgicalChant(_)
    | `Cantrip(_)
    | `Blessing(_)
    | `CustomInput(_) => Nothing
    };

  let lookupMap = (k, mp, f) => f <$> IntMap.lookup(k, mp);

  let getSkillFromOption = (staticData, option: Hero.Activatable.option) =>
    switch (option) {
    | `Skill(id) => IntMap.lookup(id, staticData.skills)
    | `Generic(_)
    | `CombatTechnique(_)
    | `Spell(_)
    | `LiturgicalChant(_)
    | `Cantrip(_)
    | `Blessing(_)
    | `CustomInput(_) => Nothing
    };

  let getDefaultNameAddition = (staticEntry, heroEntry) => {
    let input = Accessors.input(staticEntry);
    let selectOptions = Accessors.selectOptions(staticEntry);

    let sid = heroEntry |> getOption1;
    let sid2 = heroEntry |> getOption2;

    switch (input, sid, sid2) {
    // Text input
    | (Just(_), Just(`CustomInput(str)), Nothing) => Just(str)
    // Select option and text input
    | (
        Just(_),
        Just(
          `Generic(_) as id | `Skill(_) as id | `CombatTechnique(_) as id |
          `Spell(_) as id |
          `LiturgicalChant(_) as id |
          `Cantrip(_) as id |
          `Blessing(_) as id,
        ),
        Just(`CustomInput(str)),
      )
        when SelectOption.SelectOptionMap.size(selectOptions) > 0 =>
      Just(
        (
          id
          |> SelectOptions.getSelectOptionName(staticEntry)
          |> fromMaybe("")
        )
        ++ ": "
        ++ str,
      )
    // Plain select option
    | (
        Nothing,
        Just(
          `Generic(_) as id | `Skill(_) as id | `CombatTechnique(_) as id |
          `Spell(_) as id |
          `LiturgicalChant(_) as id |
          `Cantrip(_) as id |
          `Blessing(_) as id,
        ),
        Nothing,
      ) =>
      SelectOptions.getSelectOptionName(staticEntry, id)
    | _ => Nothing
    };
  };

  /**
   * A lot of entries have customization options: Text input, select option or
   * both. This function creates a string that can be appended to the `name`
   * property of the respective record to create the full active name.
   */
  let getEntrySpecificNameAddition = (staticData, staticEntry, heroEntry) =>
    switch (staticEntry) {
    | Advantage(entry) =>
      switch (Ids.AdvantageId.fromInt(entry.id)) {
      | Aptitude
      | ExceptionalSkill =>
        heroEntry
        |> getOption1
        >>= (
          sid =>
            switch (sid) {
            | `Skill(id) => lookupMap(id, staticData.skills, x => x.name)
            | `Spell(id) => lookupMap(id, staticData.spells, x => x.name)
            | `LiturgicalChant(id) =>
              lookupMap(id, staticData.liturgicalChants, x => x.name)
            | `Generic(_)
            | `CombatTechnique(_)
            | `Cantrip(_)
            | `Blessing(_)
            | `CustomInput(_) => Nothing
            }
        )
      | ExceptionalCombatTechnique
      | WeaponAptitude =>
        heroEntry
        |> getOption1
        >>= (
          sid =>
            switch (sid) {
            | `CombatTechnique(id) =>
              lookupMap(id, staticData.combatTechniques, x => x.name)
            | `Generic(_)
            | `Skill(_)
            | `Spell(_)
            | `LiturgicalChant(_)
            | `Cantrip(_)
            | `Blessing(_)
            | `CustomInput(_) => Nothing
            }
        )
      | HatredFor =>
        heroEntry
        |> getOption1
        >>= SelectOptions.getSelectOption(staticEntry)
        |> liftM2(
             (type_, frequency: Static.SelectOption.t) =>
               type_ ++ " (" ++ frequency.name ++ ")",
             getOption2(heroEntry) >>= getCustomInput,
           )
      | _ => getDefaultNameAddition(staticEntry, heroEntry)
      }
    | Disadvantage(entry) =>
      switch (Ids.DisadvantageId.fromInt(entry.id)) {
      | Incompetent =>
        heroEntry
        |> getOption1
        >>= getSkillFromOption(staticData)
        <&> (x => x.name)
      | PersonalityFlaw =>
        heroEntry
        |> getOption1
        >>= SelectOptions.getSelectOption(staticEntry)
        <&> (
          option1 =>
            (
              switch (option1.id) {
              // Get the input if Prejudice or Unworldly is selected
              | `Generic(7 | 8) => heroEntry |> getOption2 >>= getCustomInput
              // Otherwise ignore any additional options
              | `Generic(_)
              | `Skill(_)
              | `CombatTechnique(_)
              | `Spell(_)
              | `LiturgicalChant(_)
              | `Cantrip(_)
              | `Blessing(_) => Nothing
              }
            )
            |> maybe(option1.name, specialInput =>
                 option1.name ++ ": " ++ specialInput
               )
        )
      | _ => getDefaultNameAddition(staticEntry, heroEntry)
      }
    | SpecialAbility(entry) =>
      switch (Ids.SpecialAbilityId.fromInt(entry.id)) {
      | AdaptionZauber
      | FavoriteSpellwork =>
        heroEntry
        |> getOption1
        >>= (
          sid =>
            switch (sid) {
            | `Spell(id) => lookupMap(id, staticData.spells, x => x.name)
            | `Generic(_)
            | `Skill(_)
            | `CombatTechnique(_)
            | `LiturgicalChant(_)
            | `Cantrip(_)
            | `Blessing(_)
            | `CustomInput(_) => Nothing
            }
        )
      | TraditionSavant
      | Forschungsgebiet
      | Expertenwissen
      | Wissensdurst
      | Recherchegespuer =>
        heroEntry
        |> getOption1
        >>= getSkillFromOption(staticData)
        <&> (x => x.name)
      | Lieblingsliturgie =>
        heroEntry
        |> getOption1
        >>= (
          sid =>
            switch (sid) {
            | `LiturgicalChant(id) =>
              lookupMap(id, staticData.liturgicalChants, x => x.name)
            | `Generic(_)
            | `Skill(_)
            | `CombatTechnique(_)
            | `Spell(_)
            | `Cantrip(_)
            | `Blessing(_)
            | `CustomInput(_) => Nothing
            }
        )
      | SkillSpecialization =>
        heroEntry
        |> getOption1
        >>= getSkillFromOption(staticData)
        >>= (
          skill =>
            heroEntry
            |> getOption2
            >>= (
              option2 =>
                (
                  switch (option2) {
                  // If input string use input
                  | `CustomInput(x) => Just(x)
                  // Otherwise lookup application name
                  | `Generic(id) =>
                    skill.applications
                    |> IntMap.Foldable.find((a: Skill.application) =>
                         a.id === id
                       )
                    <&> (a => a.name)
                  | `Skill(_)
                  | `CombatTechnique(_)
                  | `Spell(_)
                  | `LiturgicalChant(_)
                  | `Cantrip(_)
                  | `Blessing(_) => Nothing
                  }
                )
                // Merge skill name and application name
                <&> (appName => skill.name ++ ": " ++ appName)
            )
        )
      | Exorzist =>
        switch (heroEntry.level) {
        | Just(1) =>
          heroEntry
          |> getOption1
          >>= SelectOptions.getSelectOptionName(staticEntry)
        | _ => Nothing
        }
      | SpellEnhancement as entryId
      | ChantEnhancement as entryId =>
        heroEntry
        |> getOption1
        >>= SelectOptions.getSelectOption(staticEntry)
        >>= (
          enhancement =>
            enhancement.target
            >>= (
              id =>
                (
                  switch (entryId) {
                  | SpellEnhancement =>
                    IntMap.lookup(id, staticData.spells) <&> (x => x.name)
                  | _ =>
                    IntMap.lookup(id, staticData.liturgicalChants)
                    <&> (x => x.name)
                  }
                )
                <&> (targetName => targetName ++ ": " ++ enhancement.name)
            )
        )
      | TraditionArcaneBard =>
        heroEntry
        |> getOption1
        >>= getGenericId
        >>= flip(IntMap.lookup, staticData.arcaneBardTraditions)
      | TraditionArcaneDancer =>
        heroEntry
        |> getOption1
        >>= getGenericId
        >>= flip(IntMap.lookup, staticData.arcaneDancerTraditions)
      | LanguageSpecializations =>
        liftM2(
          SelectOptions.getSelectOption,
          IntMap.lookup(
            Ids.SpecialAbilityId.toInt(Language),
            staticData.specialAbilities,
          )
          <&> (specialAbility => SpecialAbility(specialAbility)),
          getOption1(heroEntry),
        )
        |> join
        >>= (
          language =>
            heroEntry
            |> getOption2
            >>= (
              option2 =>
                (
                  switch (option2) {
                  | `CustomInput(str) => Just(str)
                  | `Generic(specializationId) =>
                    language.specializations
                    >>= (
                      specializations =>
                        ListH.(specializations <!!> specializationId - 1)
                    )
                  | `Skill(_)
                  | `CombatTechnique(_)
                  | `Spell(_)
                  | `LiturgicalChant(_)
                  | `Cantrip(_)
                  | `Blessing(_) => Nothing
                  }
                )
                <&> (specialization => language.name ++ ": " ++ specialization)
            )
        )
      | Fachwissen =>
        heroEntry
        |> getOption1
        >>= getSkillFromOption(staticData)
        >>= (
          skill => {
            let applications =
              skill.applications
              |> IntMap.filter((app: Skill.application) =>
                   app.prerequisite |> isNothing
                 );

            [heroEntry |> getOption2, heroEntry |> getOption3]
            |> mapMaybe(option =>
                 option
                 >>= getGenericId
                 >>= (
                   opt =>
                     applications
                     |> IntMap.Foldable.find((app: Skill.application) =>
                          app.id === opt
                        )
                     <&> (app => app.name)
                 )
               )
            |> ensure(apps => apps |> ListH.Foldable.length |> (===)(2))
            <&> (
              apps =>
                apps
                |> AdvancedFiltering.sortStrings(staticData)
                |> Intl.ListFormat.format(Conjunction, staticData)
                |> (appsStr => skill.name ++ ": " ++ appsStr)
            );
          }
        )
      | _ => getDefaultNameAddition(staticEntry, heroEntry)
      }
    };

  /**
   * Some entries cannot use the default `name` property from wiki entries. The
   * value returned by may not use the default `name` property. For all entries
   * that do not need to handle a specific display format, the default `name`
   * property is used.
   */
  let getEntrySpecificNameReplacements =
      (staticEntry, heroEntry, nameAddition) => {
    let name = Accessors.name(staticEntry);

    let mapNameAddition = f => maybe(name, f, nameAddition);

    let mapDefaultWithParens = () =>
      mapNameAddition(add => name ++ " (" ++ add ++ ")");
    let mapDefaultWithoutParens = () =>
      mapNameAddition(add => name ++ " " ++ add);

    let addSndInParens = snd =>
      ListH.Extra.replaceStr(")", ": " ++ snd ++ ")");

    switch (staticEntry) {
    | Advantage(entry) =>
      switch (Ids.AdvantageId.fromInt(entry.id)) {
      | ImmunityToPoison
      | ImmunityToDisease
      | HatredFor => mapDefaultWithoutParens()
      | _ => mapDefaultWithParens()
      }
    | Disadvantage(entry) =>
      switch (Ids.DisadvantageId.fromInt(entry.id)) {
      | AfraidOf => mapDefaultWithoutParens()
      | Principles
      | Obligations =>
        nameAddition
        |> liftM2(
             (level, nameAddition) =>
               name ++ " " ++ level ++ " (" ++ nameAddition ++ ")",
             heroEntry.level >>= Integers.intToRoman,
           )
        |> fromMaybe(name)
      | _ => mapDefaultWithParens()
      }
    | SpecialAbility(entry) =>
      switch (Ids.SpecialAbilityId.fromInt(entry.id)) {
      | GebieterDesAspekts => mapDefaultWithoutParens()
      | TraditionArcaneBard
      | TraditionArcaneDancer
      | TraditionSavant => mapNameAddition(flip(addSndInParens, name))
      | _ => mapDefaultWithParens()
      }
    };
  };

  type combinedName = {
    name: string,
    baseName: string,
    addName: maybe(string),
    levelName: maybe(string),
  };

  /**
   * Returns name, splitted and combined, of advantage/disadvantage/special
   * ability as a Maybe (in case the wiki entry does not exist).
   */
  let getName = (staticData, staticEntry, heroEntry) => {
    let addName =
      getEntrySpecificNameAddition(staticData, staticEntry, heroEntry);
    let fullName =
      getEntrySpecificNameReplacements(staticEntry, heroEntry, addName);

    {
      name: fullName,
      baseName: Accessors.name(staticEntry),
      addName,
      levelName: Nothing,
    };
  };
  /*
   /**
    * `compressList :: L10n -> [ActiveActivatable] -> String`
    *
    * Takes a list of active Activatables and merges them together. Used to display
    * lists of Activatables on character sheet.
    */
   export const compressList =
     (staticData: StaticDataRecord) =>
     (xs: List<Record<ActiveActivatable>>): string => {
       const grouped_xs =
         elems (groupByKey<Record<ActiveActivatable>, string> (AAA_.id) (xs))

       return pipe (
                     map (
                       ifElse<List<Record<ActiveActivatable>>>
                         (xs_group => flength (xs_group) === 1)
                         (pipe (listToMaybe, maybe ("") (AAA_.name)))
                         (xs_group => pipe (
                                             map ((x: Record<ActiveActivatable>) => {
                                               const levelPart =
                                                 pipe (
                                                       AAA_.level,
                                                       fmap (pipe (toRoman, appendStr (" "))),
                                                       fromMaybe ("")
                                                     )
                                                     (x)

                                               const selectOptionPart =
                                                 fromMaybe ("") (AAA_.addName (x))

                                               return selectOptionPart + levelPart
                                             }),
                                             sortStrings (staticData),
                                             intercalate (", "),
                                             x => ` (${x})`,
                                             x => maybe ("")
                                                       ((r: Record<ActiveActivatable>) =>
                                                         AAA_.baseName (r) + x)
                                                       (listToMaybe (xs_group))
                                           )
                                           (xs_group))
                     ),
                     sortStrings (staticData),
                     intercalate (", ")
                   )
                   (grouped_xs)
     }
   */
};
