// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Ids$OptolithClient = require("../Constants/Ids.bs.js");
var ListH$OptolithClient = require("../../Data/ListH.bs.js");
var Maybe$OptolithClient = require("../../Data/Maybe.bs.js");
var IntMap$OptolithClient = require("../../Data/IntMap.bs.js");
var Function$OptolithClient = require("../../Data/Function.bs.js");
var Static_SelectOption$OptolithClient = require("../Models/Static_SelectOption.bs.js");

function isActive(x) {
  return ListH$OptolithClient.Extra.notNull(x.active);
}

function heroEntryToSingles(x) {
  return ListH$OptolithClient.map((function (s) {
                return {
                        id: x.id,
                        options: s.options,
                        level: s.level,
                        customCost: s.customCost
                      };
              }), x.active);
}

function activatableOptionToSelectOptionId(id) {
  var variant = id[0];
  if (variant >= 290194801) {
    if (variant >= 797131559) {
      if (variant >= 931971705) {
        return /* Nothing */0;
      } else {
        return /* Just */[/* `Blessing */[
                  797131559,
                  id[1]
                ]];
      }
    } else if (variant >= 345443720) {
      return /* Just */[/* `Spell */[
                345443720,
                id[1]
              ]];
    } else {
      return /* Just */[/* `Skill */[
                290194801,
                id[1]
              ]];
    }
  } else if (variant >= -384382742) {
    if (variant >= 61643255) {
      return /* Just */[/* `Generic */[
                61643255,
                id[1]
              ]];
    } else {
      return /* Just */[/* `LiturgicalChant */[
                -384382742,
                id[1]
              ]];
    }
  } else if (variant >= -841776939) {
    return /* Just */[/* `Cantrip */[
              -841776939,
              id[1]
            ]];
  } else {
    return /* Just */[/* `CombatTechnique */[
              -920806756,
              id[1]
            ]];
  }
}

var Convert = {
  heroEntryToSingles: heroEntryToSingles,
  activatableOptionToSelectOptionId: activatableOptionToSelectOptionId
};

function getSelectOption(x, id) {
  var partial_arg;
  switch (x.tag | 0) {
    case /* Advantage */0 :
    case /* Disadvantage */1 :
        partial_arg = x[0].selectOptions;
        break;
    case /* SpecialAbility */2 :
        partial_arg = x[0].selectOptions;
        break;
    
  }
  return Maybe$OptolithClient.Monad.$great$great$eq(activatableOptionToSelectOptionId(id), (function (param) {
                return Function$OptolithClient.flip(Static_SelectOption$OptolithClient.SelectOptionMap.lookup, partial_arg, param);
              }));
}

function getSelectOptionName(x, id) {
  return Maybe$OptolithClient.Functor.$less$amp$great(getSelectOption(x, id), (function (y) {
                return y.name;
              }));
}

function getSelectOptionCost(x, id) {
  return Maybe$OptolithClient.Functor.$less$amp$great(getSelectOption(x, id), (function (y) {
                return y.cost;
              }));
}

function getActiveSelections(x) {
  return Maybe$OptolithClient.mapMaybe((function (y) {
                return Maybe$OptolithClient.listToMaybe(y.options);
              }), x.active);
}

var SelectOptions = {
  x: 7,
  y: 7,
  getSelectOption: getSelectOption,
  getSelectOptionName: getSelectOptionName,
  getSelectOptionCost: getSelectOptionCost,
  getActiveSelections: getActiveSelections
};

function getCustomInput(option) {
  if (option[0] >= 931971705) {
    return /* Just */[option[1]];
  } else {
    return /* Nothing */0;
  }
}

function getGenericId(option) {
  if (option[0] !== 61643255) {
    return /* Nothing */0;
  } else {
    return /* Just */[option[1]];
  }
}

function lookupMap(k, mp, f) {
  return Maybe$OptolithClient.Functor.$less$$great(f, Curry._2(IntMap$OptolithClient.lookup, k, mp));
}

function getSkillFromOption(staticData, option) {
  if (option[0] !== 290194801) {
    return /* Nothing */0;
  } else {
    return Curry._2(IntMap$OptolithClient.lookup, option[1], staticData.skills);
  }
}

function getEntrySpecificNameAddition(staticData, staticEntry, heroEntry) {
  switch (staticEntry.tag | 0) {
    case /* Advantage */0 :
        var match = Ids$OptolithClient.AdvantageId.fromInt(staticEntry[0].id);
        var exit = 0;
        if (typeof match === "number" && match < 22) {
          switch (match) {
            case /* Aptitude */0 :
            case /* ExceptionalSkill */4 :
                exit = 1;
                break;
            case /* ExceptionalCombatTechnique */5 :
            case /* WeaponAptitude */17 :
                exit = 2;
                break;
            case /* Nimble */1 :
            case /* Blessed */2 :
            case /* Luck */3 :
            case /* IncreasedAstralPower */6 :
            case /* IncreasedKarmaPoints */7 :
            case /* IncreasedLifePoints */8 :
            case /* IncreasedSpirit */9 :
            case /* IncreasedToughness */10 :
            case /* ImmunityToPoison */11 :
            case /* ImmunityToDisease */12 :
            case /* MagicalAttunement */13 :
            case /* Rich */14 :
            case /* SociallyAdaptable */15 :
            case /* InspireConfidence */16 :
            case /* Spellcaster */18 :
            case /* Unyielding */19 :
            case /* LargeSpellSelection */20 :
                return /* Nothing */0;
            case /* HatredOf */21 :
                return Maybe$OptolithClient.Monad.liftM2((function (type_, frequency) {
                              return type_ + (" (" + (frequency.name + ")"));
                            }), Maybe$OptolithClient.Monad.$great$great$eq(ListH$OptolithClient.$less$bang$bang$great(heroEntry.options, 1), getCustomInput), Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), (function (param) {
                                  return getSelectOption(staticEntry, param);
                                })));
            
          }
        } else {
          return /* Nothing */0;
        }
        switch (exit) {
          case 1 :
              return Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), (function (sid) {
                            var variant = sid[0];
                            if (variant !== -384382742) {
                              if (variant !== 290194801) {
                                if (variant !== 345443720) {
                                  return /* Nothing */0;
                                } else {
                                  return lookupMap(sid[1], staticData.spells, (function (x) {
                                                return x.name;
                                              }));
                                }
                              } else {
                                return lookupMap(sid[1], staticData.skills, (function (x) {
                                              return x.name;
                                            }));
                              }
                            } else {
                              return lookupMap(sid[1], staticData.liturgicalChants, (function (x) {
                                            return x.name;
                                          }));
                            }
                          }));
          case 2 :
              return Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), (function (sid) {
                            if (sid[0] >= -841776939) {
                              return /* Nothing */0;
                            } else {
                              return lookupMap(sid[1], staticData.combatTechniques, (function (x) {
                                            return x.name;
                                          }));
                            }
                          }));
          
        }
        break;
    case /* Disadvantage */1 :
        var match$1 = Ids$OptolithClient.DisadvantageId.fromInt(staticEntry[0].id);
        if (typeof match$1 === "number") {
          if (match$1 !== 12) {
            if (match$1 !== 18) {
              return /* Nothing */0;
            } else {
              return Maybe$OptolithClient.Functor.$less$amp$great(Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), (function (param) {
                                return getSkillFromOption(staticData, param);
                              })), (function (x) {
                            return x.name;
                          }));
            }
          } else {
            return Maybe$OptolithClient.Functor.$less$amp$great(Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), (function (param) {
                              return getSelectOption(staticEntry, param);
                            })), (function (option1) {
                          var match = option1.id;
                          return Maybe$OptolithClient.maybe(option1.name, (function (specialInput) {
                                        return option1.name + (": " + specialInput);
                                      }), match[0] !== 61643255 || (match[1] - 7 >>> 0) > 1 ? /* Nothing */0 : Maybe$OptolithClient.Monad.$great$great$eq(ListH$OptolithClient.$less$bang$bang$great(heroEntry.options, 1), getCustomInput));
                        }));
          }
        } else {
          return /* Nothing */0;
        }
    case /* SpecialAbility */2 :
        var match$2 = Ids$OptolithClient.SpecialAbilityId.fromInt(staticEntry[0].id);
        var exit$1 = 0;
        if (typeof match$2 === "number") {
          if (match$2 !== 71) {
            if (match$2 >= 16) {
              if (match$2 >= 53) {
                return /* Nothing */0;
              } else {
                switch (match$2 - 16 | 0) {
                  case /* TerrainKnowledge */1 :
                      var match$3 = heroEntry.level;
                      if (match$3 && match$3[0] === 1) {
                        return Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), (function (param) {
                                      return getSelectOptionName(staticEntry, param);
                                    }));
                      } else {
                        return /* Nothing */0;
                      }
                  case /* SkillSpecialization */0 :
                  case /* CraftInstruments */2 :
                      exit$1 = 1;
                      break;
                  case /* SpellEnhancement */25 :
                      return Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), (function (sid) {
                                    if (sid[0] !== -384382742) {
                                      return /* Nothing */0;
                                    } else {
                                      return lookupMap(sid[1], staticData.liturgicalChants, (function (x) {
                                                    return x.name;
                                                  }));
                                    }
                                  }));
                  case /* TraditionGuildMages */9 :
                  case /* PredigtDerGemeinschaft */30 :
                      break;
                  case /* PredigtDesWohlgefallens */33 :
                      var partial_arg = staticData.arcaneBardTraditions;
                      return Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), getGenericId), (function (param) {
                                    return Function$OptolithClient.flip(IntMap$OptolithClient.lookup, partial_arg, param);
                                  }));
                  case /* PredigtWiderMissgeschicke */34 :
                      var partial_arg$1 = staticData.arcaneDancerTraditions;
                      return Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), getGenericId), (function (param) {
                                    return Function$OptolithClient.flip(IntMap$OptolithClient.lookup, partial_arg$1, param);
                                  }));
                  case /* Hunter */3 :
                  case /* AreaKnowledge */4 :
                  case /* Literacy */5 :
                  case /* Language */6 :
                  case /* CombatReflexes */7 :
                  case /* ImprovedDodge */8 :
                  case /* Feuerschlucker */14 :
                  case /* CombatStyleCombination */15 :
                  case /* AdaptionZauber */16 :
                  case /* Exorzist */17 :
                  case /* FavoriteSpellwork */18 :
                  case /* TraditionWitches */19 :
                  case /* MagicStyleCombination */20 :
                  case /* Harmoniezauberei */21 :
                  case /* Matrixzauberei */22 :
                  case /* TraditionElves */23 :
                  case /* TraditionDruids */24 :
                  case /* Forschungsgebiet */26 :
                  case /* Expertenwissen */27 :
                  case /* Wissensdurst */28 :
                  case /* Recherchegespuer */29 :
                  case /* PredigtDerZuversicht */31 :
                  case /* PredigtDesGottvertrauens */32 :
                  case /* VisionDerBestimmung */35 :
                      return /* Nothing */0;
                  case /* PropertyKnowledge */10 :
                  case /* PropertyFocus */11 :
                  case /* AspectKnowledge */12 :
                  case /* TraditionChurchOfPraios */13 :
                  case /* VisionDerEntrueckung */36 :
                      exit$1 = 2;
                      break;
                  
                }
              }
            } else if (match$2 !== 0) {
              return /* Nothing */0;
            } else {
              return Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), (function (param) {
                                return getSkillFromOption(staticData, param);
                              })), (function (skill) {
                            return Maybe$OptolithClient.Monad.$great$great$eq(ListH$OptolithClient.$less$bang$bang$great(heroEntry.options, 1), (function (option2) {
                                          var variant = option2[0];
                                          var tmp;
                                          if (variant !== 61643255) {
                                            tmp = variant >= 931971705 ? /* Just */[option2[1]] : /* Nothing */0;
                                          } else {
                                            var id = option2[1];
                                            tmp = Maybe$OptolithClient.Functor.$less$amp$great(Curry._2(IntMap$OptolithClient.Foldable.find, (function (a) {
                                                        return a.id === id;
                                                      }), skill.applications), (function (a) {
                                                    return a.name;
                                                  }));
                                          }
                                          return Maybe$OptolithClient.Functor.$less$amp$great(tmp, (function (appName) {
                                                        return skill.name + (": " + appName);
                                                      }));
                                        }));
                          }));
            }
          } else {
            return Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.Monad.join(Maybe$OptolithClient.Monad.liftM2(getSelectOption, Maybe$OptolithClient.Functor.$less$amp$great(Curry._2(IntMap$OptolithClient.lookup, Ids$OptolithClient.SpecialAbilityId.toInt(/* Language */6), staticData.specialAbilities), (function (specialAbility) {
                                      return /* SpecialAbility */Block.__(2, [specialAbility]);
                                    })), Maybe$OptolithClient.listToMaybe(heroEntry.options))), (function (language) {
                          return Maybe$OptolithClient.Monad.$great$great$eq(ListH$OptolithClient.$less$bang$bang$great(heroEntry.options, 1), (function (option2) {
                                        var variant = option2[0];
                                        var tmp;
                                        if (variant !== 61643255) {
                                          tmp = variant >= 931971705 ? /* Just */[option2[1]] : /* Nothing */0;
                                        } else {
                                          var specializationId = option2[1];
                                          tmp = Maybe$OptolithClient.Monad.$great$great$eq(language.specializations, (function (specializations) {
                                                  return ListH$OptolithClient.$less$bang$bang$great(specializations, specializationId - 1 | 0);
                                                }));
                                        }
                                        return Maybe$OptolithClient.Functor.$less$amp$great(tmp, (function (specialization) {
                                                      return language.name + (": " + specialization);
                                                    }));
                                      }));
                        }));
          }
          return Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), (function (param) {
                            return getSelectOption(staticEntry, param);
                          })), (function (enhancement) {
                        return Maybe$OptolithClient.Monad.$great$great$eq(enhancement.target, (function (id) {
                                      var tmp;
                                      var exit = 0;
                                      if (typeof match$2 === "number" && match$2 === 25) {
                                        tmp = Maybe$OptolithClient.Functor.$less$amp$great(Curry._2(IntMap$OptolithClient.lookup, id, staticData.spells), (function (x) {
                                                return x.name;
                                              }));
                                      } else {
                                        exit = 1;
                                      }
                                      if (exit === 1) {
                                        tmp = Maybe$OptolithClient.Functor.$less$amp$great(Curry._2(IntMap$OptolithClient.lookup, id, staticData.liturgicalChants), (function (x) {
                                                return x.name;
                                              }));
                                      }
                                      return Maybe$OptolithClient.Functor.$less$amp$great(tmp, (function (targetName) {
                                                    return targetName + (": " + enhancement.name);
                                                  }));
                                    }));
                      }));
        } else {
          return /* Nothing */0;
        }
        switch (exit$1) {
          case 1 :
              return Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), (function (sid) {
                            if (sid[0] !== 345443720) {
                              return /* Nothing */0;
                            } else {
                              return lookupMap(sid[1], staticData.spells, (function (x) {
                                            return x.name;
                                          }));
                            }
                          }));
          case 2 :
              return Maybe$OptolithClient.Functor.$less$amp$great(Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), (function (param) {
                                return getSkillFromOption(staticData, param);
                              })), (function (x) {
                            return x.name;
                          }));
          
        }
        break;
    
  }
}

var Names = {
  getEntrySpecificNameAddition: getEntrySpecificNameAddition
};

exports.isActive = isActive;
exports.Convert = Convert;
exports.SelectOptions = SelectOptions;
exports.Names = Names;
/* IntMap-OptolithClient Not a pure module */
