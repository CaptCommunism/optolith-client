// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var ListH$OptolithClient = require("../../Data/ListH.bs.js");
var Maybe$OptolithClient = require("../../Data/Maybe.bs.js");
var IntMap$OptolithClient = require("../../Data/IntMap.bs.js");
var Function$OptolithClient = require("../../Data/Function.bs.js");
var Static_SelectOption$OptolithClient = require("../Models/Static_SelectOption.bs.js");

function isActive(x) {
  return ListH$OptolithClient.Extra.notNull(x.active);
}

function heroEntryToSingles(x) {
  return ListH$OptolithClient.map((function (s) {
                return {
                        id: x.id,
                        options: s.options,
                        level: s.level,
                        customCost: s.customCost
                      };
              }), x.active);
}

function activatableOptionToSelectOptionId(id) {
  if (id[0] >= 931971705) {
    return /* Nothing */0;
  } else {
    return /* Just */[id];
  }
}

function isSelectOptionId(id) {
  return id[0] < 931971705;
}

var Convert = {
  heroEntryToSingles: heroEntryToSingles,
  activatableOptionToSelectOptionId: activatableOptionToSelectOptionId,
  isSelectOptionId: isSelectOptionId
};

function getSelectOption(x, id) {
  var partial_arg;
  switch (x.tag | 0) {
    case /* Advantage */0 :
    case /* Disadvantage */1 :
        partial_arg = x[0].selectOptions;
        break;
    case /* SpecialAbility */2 :
        partial_arg = x[0].selectOptions;
        break;
    
  }
  return Maybe$OptolithClient.Monad.$great$great$eq(activatableOptionToSelectOptionId(id), (function (param) {
                return Function$OptolithClient.flip(Static_SelectOption$OptolithClient.SelectOptionMap.lookup, partial_arg, param);
              }));
}

function getSelectOptionName(x, id) {
  return Maybe$OptolithClient.Functor.$less$amp$great(getSelectOption(x, id), (function (y) {
                return y.name;
              }));
}

function getSelectOptionCost(x, id) {
  return Maybe$OptolithClient.Functor.$less$amp$great(getSelectOption(x, id), (function (y) {
                return y.cost;
              }));
}

function getActiveSelections(x) {
  return Maybe$OptolithClient.mapMaybe((function (y) {
                return Maybe$OptolithClient.listToMaybe(y.options);
              }), x.active);
}

var SelectOptions = {
  x: 7,
  y: 7,
  getSelectOption: getSelectOption,
  getSelectOptionName: getSelectOptionName,
  getSelectOptionCost: getSelectOptionCost,
  getActiveSelections: getActiveSelections
};

var Names = { };

exports.isActive = isActive;
exports.Convert = Convert;
exports.SelectOptions = SelectOptions;
exports.Names = Names;
/* IntMap-OptolithClient Not a pure module */
