// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Ids$OptolithClient = require("../Constants/Ids.bs.js");
var ListH$OptolithClient = require("../../Data/ListH.bs.js");
var Maybe$OptolithClient = require("../../Data/Maybe.bs.js");
var IntMap$OptolithClient = require("../../Data/IntMap.bs.js");
var Static_SelectOption$OptolithClient = require("../Models/Static_SelectOption.bs.js");

function isActive(x) {
  return ListH$OptolithClient.Extra.notNull(x.active);
}

function heroEntryToSingles(x) {
  return ListH$OptolithClient.map((function (s) {
                return {
                        id: x.id,
                        options: s.options,
                        level: s.level,
                        customCost: s.customCost
                      };
              }), x.active);
}

var Convert = {
  heroEntryToSingles: heroEntryToSingles
};

function findSelectOption(x, id) {
  var tmp;
  switch (x.tag | 0) {
    case /* Advantage */0 :
    case /* Disadvantage */1 :
        tmp = x[0].selectOptions;
        break;
    case /* SpecialAbility */2 :
        tmp = x[0].selectOptions;
        break;
    
  }
  return Curry._2(Static_SelectOption$OptolithClient.SelectOptionMap.lookup, id, tmp);
}

function getSelectOptionName(x, id) {
  return Maybe$OptolithClient.Functor.$less$amp$great(findSelectOption(x, id), (function (y) {
                return y.name;
              }));
}

function getSelectOptionCost(x, id) {
  return Maybe$OptolithClient.Functor.$less$amp$great(findSelectOption(x, id), (function (y) {
                return y.cost;
              }));
}

function getActiveSelections(x) {
  return Maybe$OptolithClient.mapMaybe((function (y) {
                return Maybe$OptolithClient.listToMaybe(y.options);
              }), x.active);
}

var SelectOptions = {
  findSelectOption: findSelectOption,
  getSelectOptionName: getSelectOptionName,
  getSelectOptionCost: getSelectOptionCost,
  getActiveSelections: getActiveSelections
};

function lookupMap(k, mp, f) {
  return Maybe$OptolithClient.Functor.$less$$great(f, Curry._2(IntMap$OptolithClient.lookup, k, mp));
}

function getNameFromCombatTechnique(staticData, heroEntry) {
  return Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry.options), (function (sid) {
                if (typeof sid === "number" || sid[0] !== -920806756) {
                  return /* Nothing */0;
                } else {
                  return lookupMap(sid[1], staticData.combatTechniques, (function (x) {
                                return x.name;
                              }));
                }
              }));
}

function getEntrySpecificNameAddition(staticData, staticEntry, heroEntry) {
  switch (staticEntry.tag | 0) {
    case /* Advantage */0 :
        var match = Ids$OptolithClient.AdvantageId.fromInt(heroEntry.id);
        if (typeof match === "number") {
          if (match !== 17) {
            if (match >= 6) {
              return /* Nothing */0;
            } else {
              switch (match) {
                case /* Nimble */1 :
                case /* Blessed */2 :
                case /* Luck */3 :
                    return /* Nothing */0;
                case /* Aptitude */0 :
                case /* ExceptionalSkill */4 :
                    var staticData$1 = staticData;
                    var heroEntry$1 = heroEntry;
                    return Maybe$OptolithClient.Monad.$great$great$eq(Maybe$OptolithClient.listToMaybe(heroEntry$1.options), (function (sid) {
                                  if (typeof sid === "number") {
                                    return /* Nothing */0;
                                  } else {
                                    var variant = sid[0];
                                    if (variant !== -384382742) {
                                      if (variant !== 290194801) {
                                        if (variant !== 345443720) {
                                          return /* Nothing */0;
                                        } else {
                                          return lookupMap(sid[1], staticData$1.spells, (function (x) {
                                                        return x.name;
                                                      }));
                                        }
                                      } else {
                                        return lookupMap(sid[1], staticData$1.skills, (function (x) {
                                                      return x.name;
                                                    }));
                                      }
                                    } else {
                                      return lookupMap(sid[1], staticData$1.liturgicalChants, (function (x) {
                                                    return x.name;
                                                  }));
                                    }
                                  }
                                }));
                case /* ExceptionalCombatTechnique */5 :
                    return getNameFromCombatTechnique(staticData, heroEntry);
                
              }
            }
          } else {
            return getNameFromCombatTechnique(staticData, heroEntry);
          }
        } else {
          return /* Nothing */0;
        }
    case /* Disadvantage */1 :
    case /* SpecialAbility */2 :
        return /* Nothing */0;
    
  }
}

var Names = {
  getEntrySpecificNameAddition: getEntrySpecificNameAddition
};

exports.isActive = isActive;
exports.Convert = Convert;
exports.SelectOptions = SelectOptions;
exports.Names = Names;
/* IntMap-OptolithClient Not a pure module */
