/**
 * This file provides several helper functions for working with `Activatable`s.
 *
 * @file src/utils/activatableConvertUtils.ts
 * @author Lukas Obermann
 * @since 1.1.0
 */

import { pipe } from "ramda";
import { alt, empty, guard } from "../../../../Control/Applicative";
import { then } from "../../../../Control/Monad";
import { elemF, foldr, or } from "../../../../Data/Foldable";
import { fmap } from "../../../../Data/Functor";
import { append, imap, List } from "../../../../Data/List";
import { isJust, Nothing } from "../../../../Data/Maybe";
import { mergeSafeR2, Record } from "../../../../Data/Record";
import { ActivatableDependent } from "../../../Models/ActiveEntries/ActivatableDependent";
import { ActiveObject } from "../../../Models/ActiveEntries/ActiveObject";
import { ActiveObjectWithId } from "../../../Models/ActiveEntries/ActiveObjectWithId";
import { ActivateArgs } from "../../../Models/Hero/heroTypeHelpers";

const { id, active } = ActivatableDependent.A
const { sid, sid2, tier, cost } = ActiveObject.A

/**
 * Converts the object generated by the list item to an object that can be
 * inserted into an array of ActiveObjects.
 * @param obj The entry for which you want to convert the object.
 * @param activate The object generated by the list item.
 */
export const convertUIStateToActiveObject =
  (activate: ActivateArgs): Record<ActiveObject> =>
    activate .id === "ADV_68"
    ? ActiveObject ({
        sid: activate .sel,
        sid2: activate .input,
        cost: activate .customCost,
      })
    : activate .id === "DISADV_33"
    ? ActiveObject ({
        sid: activate .sel,
        sid2: or (fmap (elemF (List<number | string> (7, 8))) (activate .sel))
          ? activate .input
          : Nothing,
        cost: activate .customCost,
      })
    : activate .id === "SA_9"
    ? ActiveObject ({
        sid: activate .sel,
        sid2: alt<number | string> (activate .input) (activate .sel2),
        cost: activate .customCost,
      })
    : ActiveObject ({
        sid: alt<number | string> (activate .input) (activate .sel),
        sid2: then (guard ("Maybe") (isJust (activate .input) || isJust (activate .sel)))
                   (activate .sel2),
        tier: activate .tier,
        cost: activate .customCost,
      })

/**
 * Generates a list of ActiveObjects based on the given instance.
 */
export const convertActivatableToArray =
  (x: Record<ActivatableDependent>) =>
    pipe (
           active,
           imap (
             index => e => ActiveObjectWithId ({
                                               id: id (x),
                                               index,
                                               sid: sid (e),
                                               sid2: sid2 (e),
                                               tier: tier (e),
                                               cost: cost (e),
                                             })
           )
         )
         (x)

/**
 * Get all active items in an array.
 * @param state A state slice.
 */
export const getActiveFromState =
  foldr (pipe (convertActivatableToArray, append)) (empty ("List"))

export interface ActiveObjectAny extends ActiveObject {
  [key: string]: any
}

/**
 * Returns only `sid`, `sid2` and `tier` property of passed `ActiveObject`.
 * @param activeObject
 */
export const getActiveObjectCore =
  (x: Record<ActiveObjectAny>): Record<ActiveObject> =>
    mergeSafeR2<ActiveObject> (x) (ActiveObject.default)
