import { flatten } from 'lodash';
import * as Data from '../types/data.d';
import { ActivatablePrerequisites } from '../types/wiki.d';
import { match } from './match';

/**
 * Converts the object generated by the list item to an object that can be
 * inserted into an array of ActiveObjects.
 * @param obj The entry for which you want to convert the object.
 * @param activate The object generated by the list item.
 */
export const convertUIStateToActiveObject =
  (activate: Data.ActivateArgs): Data.ActiveObject => {
    const { id, sel, sel2, input, tier, customCost } = activate;

    const active = match<string, Data.ActiveObject>(id)
      .on('ADV_68', () => {
        return {
          sid: sel,
          sid2: input
        };
      })
      .on(pre => ['DISADV_1', 'DISADV_34', 'DISADV_50'].includes(pre), () => {
        return {
          sid: input || sel,
          tier,
        };
      })
      .on('DISADV_33', () => {
        if ([7, 8].includes(sel as number) && input) {
          return {
            sid: sel,
            sid2: input,
          };
        }
        else {
          return {
            sid: sel,
          };
        }
      })
      .on('DISADV_36', () => {
        return {
          sid: input || sel,
        };
      })
      .on('SA_9', () => {
        return {
          sid: sel,
          sid2: input || sel2,
        };
      })
      .otherwise(() => {
        if (sel !== undefined && tier !== undefined) {
          return {
            sid: input || sel,
            sid2: sel2,
            tier,
          };
        }
        else if (sel !== undefined) {
          return {
            sid: input || sel,
            sid2: sel2,
          };
        }
        else if (input !== undefined && tier !== undefined) {
          return {
            sid: input, tier,
          };
        }
        else if (input !== undefined) {
          return {
            sid: input
          };
        }
        else if (tier !== undefined) {
          return {
            tier
          };
        }
        else {
          return {};
        }
      });

    return {
      ...active,
      cost: customCost
    };
  };

export function flattenPrerequisites(
  prerequisites: ActivatablePrerequisites | Map<number, ActivatablePrerequisites>,
  tier: number,
): ActivatablePrerequisites;
export function flattenPrerequisites(
  prerequisites: ActivatablePrerequisites | Map<number, ActivatablePrerequisites>,
  oldTier: number,
  newTier: number,
): ActivatablePrerequisites;
export function flattenPrerequisites(
  prerequisites: ActivatablePrerequisites | Map<number, ActivatablePrerequisites>,
  oldTier: number,
  newTier?: number,
): ActivatablePrerequisites {
  if (prerequisites instanceof Map) {
    let filter = (e: [number, ActivatablePrerequisites]) => e[0] <= oldTier;

    if (typeof newTier === 'number') {
      const lower = Math.min(oldTier, newTier);
      const higher = Math.max(oldTier, newTier);

      filter = e => e[0] <= higher && e[0] > lower;
    }

    return flatten([...prerequisites].filter(e => filter(e)).map(e => e[1]));
  }

  return prerequisites;
}
