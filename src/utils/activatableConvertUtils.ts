import * as Data from '../types/data';
import { ActivatablePrerequisites } from '../types/wiki';
import { flatten } from 'lodash';

/**
 * Converts the object generated by the list item to an object that can be
 * inserted into an array of ActiveObjects.
 * @param obj The entry for which you want to convert the object.
 * @param activate The object generated by the list item.
 */
export function convertUIStateToActiveObject(activate: Data.ActivateArgs): Data.ActiveObject {
  const { id, sel, sel2, input, tier, customCost } = activate;
  let active;
  switch (id) {
    case 'ADV_68':
      active = { sid: sel, sid2: input };
      break;
    case 'DISADV_1':
    case 'DISADV_34':
    case 'DISADV_50':
      if (!input) {
        active = { sid: sel, tier };
      }
      else {
        active = { sid: input, tier };
      }
      break;
    case 'DISADV_33':
      if ([7, 8].includes(sel as number) && input) {
        active = { sid: sel, sid2: input };
      }
      else {
        active = { sid: sel };
      }
      break;
    case 'DISADV_36':
      if (!input) {
        active = { sid: sel };
      }
      else {
        active = { sid: input };
      }
      break;
    case 'SA_9':
      if (!input) {
        active = { sid: sel, sid2: sel2 };
      }
      else {
        active = { sid: sel, sid2: input };
      }
      break;

    default:
      if (sel !== undefined && tier !== undefined) {
        active = { sid: input || sel, sid2: sel2, tier };
      }
      else if (sel !== undefined) {
        active = { sid: input || sel, sid2: sel2 };
      }
      else if (input !== undefined && tier !== undefined) {
        active = { sid: input, tier };
      }
      else if (input !== undefined) {
        active = { sid: input };
      }
      else if (tier !== undefined) {
        active = { tier };
      }
      else {
        active = {};
      }
      break;
  }

  return { ...active, cost: customCost };
}

export function flattenPrerequisites(
  prerequisites: ActivatablePrerequisites | Map<number, ActivatablePrerequisites>,
  tier: number,
): ActivatablePrerequisites;
export function flattenPrerequisites(
  prerequisites: ActivatablePrerequisites | Map<number, ActivatablePrerequisites>,
  oldTier: number,
  newTier: number,
): ActivatablePrerequisites;
export function flattenPrerequisites(
  prerequisites: ActivatablePrerequisites | Map<number, ActivatablePrerequisites>,
  oldTier: number,
  newTier?: number,
): ActivatablePrerequisites {
  if (prerequisites instanceof Map) {
    let filter = (e: [number, ActivatablePrerequisites]) => e[0] <= oldTier;

    if (typeof newTier === 'number') {
      const lower = Math.min(oldTier, newTier);
      const higher = Math.max(oldTier, newTier);

      filter = e => e[0] <= higher && e[0] > lower;
    }

    return flatten([...prerequisites].filter(e => filter(e)).map(e => e[1]));
  }

  return prerequisites;
}
