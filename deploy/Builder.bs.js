// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Process = require("process");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var ElectronBuilder = require("electron-builder");

var WINDOWS = { };

var LINUX = { };

var MAC = { };

var Platform = {
  WINDOWS: WINDOWS,
  LINUX: LINUX,
  MAC: MAC
};

var Config = { };

var ElectronBuilder$1 = {
  Platform: Platform,
  Config: Config
};

function publishToServer(channel, os) {
  switch (os) {
    case /* Windows */0 :
        break;
    case /* OSX */1 :
        break;
    case /* Linux */2 :
        break;
    
  }
  switch (os) {
    case /* Windows */0 :
        break;
    case /* OSX */1 :
        break;
    case /* Linux */2 :
        break;
    
  }
  if (channel) {
    switch (os) {
      case /* Windows */0 :
          break;
      case /* OSX */1 :
          break;
      case /* Linux */2 :
          break;
      
    }
  } else {
    switch (os) {
      case /* Windows */0 :
          break;
      case /* OSX */1 :
          break;
      case /* Linux */2 :
          break;
      
    }
  }
  if (channel) {
    switch (os) {
      case /* Windows */0 :
          break;
      case /* OSX */1 :
          break;
      case /* Linux */2 :
          break;
      
    }
  } else {
    switch (os) {
      case /* Windows */0 :
          break;
      case /* OSX */1 :
          break;
      case /* Linux */2 :
          break;
      
    }
  }
  return /* () */0;
}

var Publisher = {
  publishToServer: publishToServer
};

var config_appId = "com.lukasobermann.optolith";

var config_productName = "Optolith";

var config_copyright = "This product was created under a license. Das Schwarze Auge and its logo as well as Aventuria, Dere, Myranor, Riesland, Tharun and Uthuria and their logos are trademarks of Significant GbR. The title and contents of this book are protected under the copyright laws of the United States of America. No part of this publication may be reproduced, stored in retrieval systems or transmitted, in any form or by any means, whether electronic, mechanical, photocopy, recording, or otherwise, without prior written consent by Ulisses Spiele GmbH, Waldems. This publication includes material that is protected under copyright laws by Ulisses Spiele and/or other authors. Such material is used under the Community Content Agreement for the SCRIPTORIUM AVENTURIS. All other original materials in this work is copyright 2017-present by Lukas Obermann and published under the Community Content Agreement for the SCRIPTORIUM AVENTURIS.";

var config_directories = {
  buildResources: undefined,
  output: "dist",
  app: undefined
};

var config_mac = {
  artifactName: "Optolith_${version}.${ext}",
  category: "public.app-category.role-playing-games",
  target: "default",
  icon: "app/icon.icns",
  type: "distribution",
  hardenedRuntime: true,
  gatekeeperAssess: false
};

var config_dmg = {
  sign: false
};

var config_win = {
  artifactName: "OptolithSetup_${version}.${ext}",
  target: [{
      target: "nsis",
      arch: [
        "x64",
        "ia32"
      ]
    }],
  icon: "app/icon.ico"
};

var config_nsis = {
  perMachine: true,
  deleteAppDataOnUninstall: false
};

var config_linux = {
  artifactName: "Optolith_${version}.${ext}",
  category: "RolePlaying",
  target: [
    {
      target: "AppImage",
      arch: ["x64"]
    },
    {
      target: "tar.gz",
      arch: ["x64"]
    }
  ],
  executableName: "Optolith",
  icon: "app"
};

var config_files = ["app/**/*"];

var config_publish = {
  provider: "generic",
  url: Belt_Option.getWithDefault(Js_dict.get(Process.env, "PUBLISH_URL"), ""),
  channel: "latest",
  useMultipleRangeRequest: undefined
};

var config = {
  appId: config_appId,
  productName: config_productName,
  copyright: config_copyright,
  directories: config_directories,
  mac: config_mac,
  dmg: config_dmg,
  win: config_win,
  nsis: config_nsis,
  linux: config_linux,
  files: config_files,
  publish: config_publish
};

function buildWindows(param) {
  console.log("Building Optolith for Windows...");
  return ElectronBuilder.build({
                    config: config,
                    targets: ElectronBuilder.Platform.WINDOWS.createTarget()
                  }).then((function (x) {
                    console.log("Optolith Build for Windows successful.");
                    return Promise.resolve(/* () */0);
                  })).then((function (param) {
                  return Promise.resolve(publishToServer(/* Stable */0, /* Windows */0));
                })).then((function (param) {
                console.log("Optolith Build for Windows deployed.");
                return Promise.resolve(/* () */0);
              }));
}

function buildLinux(param) {
  console.log("Building Optolith for Linux...");
  return ElectronBuilder.build({
                    config: config,
                    targets: ElectronBuilder.Platform.LINUX.createTarget()
                  }).then((function (x) {
                    console.log("Optolith Build for Linux successful.");
                    return Promise.resolve(/* () */0);
                  })).then((function (param) {
                  return Promise.resolve(publishToServer(/* Stable */0, /* Linux */2));
                })).then((function (param) {
                console.log("Optolith Build for Linux deployed.");
                return Promise.resolve(/* () */0);
              }));
}

function buildMac(param) {
  console.log("Building Optolith for OSX...");
  return ElectronBuilder.build({
                    config: config,
                    targets: ElectronBuilder.Platform.MAC.createTarget()
                  }).then((function (x) {
                    console.log("Optolith Build for OSX successful.");
                    return Promise.resolve(/* () */0);
                  })).then((function (param) {
                  return Promise.resolve(publishToServer(/* Stable */0, /* OSX */1));
                })).then((function (param) {
                console.log("Optolith Build for OSX deployed.");
                return Promise.resolve(/* () */0);
              }));
}

var Stable = {
  config: config,
  buildWindows: buildWindows,
  buildLinux: buildLinux,
  buildMac: buildMac
};

exports.ElectronBuilder = ElectronBuilder$1;
exports.Publisher = Publisher;
exports.Stable = Stable;
/* config Not a pure module */
